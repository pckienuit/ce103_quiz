document.addEventListener('DOMContentLoaded', () => {
    // C√°c bi·∫øn tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ HTML
    const startScreen = document.getElementById('start-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const resultScreen = document.getElementById('result-screen');
    const startBtn = document.getElementById('start-quiz-btn');
    const nextBtn = document.getElementById('next-question-btn');
    const restartBtn = document.getElementById('restart-quiz-btn');
    const exitBtn = document.getElementById('exit-quiz-btn');
    
    const questionCounter = document.getElementById('question-counter');
    const timerDisplay = document.getElementById('timer');
    const questionText = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const explanationArea = document.getElementById('explanation-area');
    const explanationText = document.getElementById('explanation-text');
    const topicIndicator = document.getElementById('topic-indicator');

    const scoreDisplay = document.getElementById('score');
    const percentageDisplay = document.getElementById('percentage');
    const resultMessage = document.getElementById('result-message');
    const topicBreakdown = document.getElementById('topic-breakdown');

    let allQuestions = [];
    let currentQuizQuestions = [];
    let currentQuestionIndex = 0;
    let score = 0;
    let timerInterval;
    let topicStats = {};
    const QUIZ_DURATION = 75 * 60; // 75 ph√∫t t√≠nh b·∫±ng gi√¢y
    const NUM_QUESTIONS = 40;

    // H√†m fetch c√¢u h·ªèi IT007 t·ª´ backend
    async function fetchQuestions() {
        try {
            const response = await fetch('api/get_it007_questions.php');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            allQuestions = await response.json();
            console.log(`ƒê√£ t·∫£i ${allQuestions.length} c√¢u h·ªèi IT007`);
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi IT007:', error);
            questionText.textContent = 'L·ªói t·∫£i c√¢u h·ªèi IT007. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    // H√†m x√°o tr·ªôn m·∫£ng (Fisher-Yates shuffle)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    // H√†m b·∫Øt ƒë·∫ßu quiz
    function startQuiz() {
        startScreen.classList.add('hidden');
        resultScreen.classList.add('hidden');
        quizScreen.classList.remove('hidden');

        currentQuestionIndex = 0;
        score = 0;
        topicStats = {};
        shuffleArray(allQuestions);
        currentQuizQuestions = allQuestions.slice(0, NUM_QUESTIONS);

        // Kh·ªüi t·∫°o th·ªëng k√™ ch·ªß ƒë·ªÅ
        currentQuizQuestions.forEach(q => {
            if (!topicStats[q.topic]) {
                topicStats[q.topic] = { total: 0, correct: 0 };
            }
            topicStats[q.topic].total++;
        });

        displayQuestion();
        startTimer();
    }

    // H√†m format code trong text (phi√™n b·∫£n ƒë∆°n gi·∫£n cho IT007)
    function formatCodeInText(text) {
        let formattedText = text;
        
        // 1. Ch·ªâ x·ª≠ l√Ω code trong backticks (`)
        formattedText = formattedText.replace(/`([^`]+)`/g, '<code class="inline-code">$1</code>');
        
        // 2. Highlight m·ªôt s·ªë thu·∫≠t ng·ªØ OS c∆° b·∫£n
        formattedText = formattedText.replace(
            /\b(OS|CPU|RAM|Process|Thread|Deadlock|Semaphore|Mutex|FIFO|LIFO|LRU|FCFS|SJF|RR)\b/g,
            '<span class="tech-term">$&</span>'
        );
        
        // 3. Highlight c√°c s·ªë v√† th·ªùi gian
        formattedText = formattedText.replace(
            /\b(\d+ms|\d+s|\d+%|\d+KB|\d+MB|\d+GB)\b/g,
            '<span class="number-highlight">$&</span>'
        );
        
        return formattedText;
    }

    // H√†m hi·ªÉn th·ªã c√¢u h·ªèi
    function displayQuestion() {
        resetState();
        const question = currentQuizQuestions[currentQuestionIndex];
        questionCounter.textContent = `C√¢u ${currentQuestionIndex + 1} / ${NUM_QUESTIONS}`;
        
        // Hi·ªÉn th·ªã ch·ªß ƒë·ªÅ
        topicIndicator.textContent = question.topic;
        
        // Format c√¢u h·ªèi v·ªõi code highlighting
        const formattedQuestion = formatCodeInText(question.question);
        questionText.innerHTML = formattedQuestion;

        for (const key in question.options) {
            const button = document.createElement('button');
            const formattedOption = formatCodeInText(question.options[key]);
            button.innerHTML = `<strong>${key}.</strong> ${formattedOption}`;
            button.classList.add('option-btn');
            button.dataset.answer = key;
            button.addEventListener('click', selectAnswer);
            optionsContainer.appendChild(button);
        }

        // Render l·∫°i c√°c c√¥ng th·ª©c to√°n h·ªçc v·ªõi MathJax
        if (window.MathJax) {
            MathJax.typesetPromise([questionText, optionsContainer]).catch(function (err) {
                console.log('MathJax error: ' + err.message);
            });
        }
    }

    // H√†m reset tr·∫°ng th√°i tr∆∞·ªõc khi hi·ªÉn th·ªã c√¢u h·ªèi m·ªõi
    function resetState() {
        optionsContainer.innerHTML = '';
        explanationArea.classList.add('hidden');
        nextBtn.classList.add('hidden');
    }

    // H√†m x·ª≠ l√Ω khi ch·ªçn c√¢u tr·∫£ l·ªùi
    function selectAnswer(e) {
        const selectedBtn = e.target.closest('.option-btn');
        if (!selectedBtn) return;

        const selectedAnswer = selectedBtn.dataset.answer;
        const correctAnswer = currentQuizQuestions[currentQuestionIndex].answer;
        const currentTopic = currentQuizQuestions[currentQuestionIndex].topic;

        if (selectedAnswer === correctAnswer) {
            score++;
            topicStats[currentTopic].correct++;
            selectedBtn.classList.add('correct');
        } else {
            selectedBtn.classList.add('incorrect');
        }

        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch
        Array.from(optionsContainer.children).forEach(button => {
            if (button.dataset.answer === correctAnswer) {
                button.classList.add('correct');
            }
            button.disabled = true; // V√¥ hi·ªáu h√≥a c√°c l·ª±a ch·ªçn
        });

        explanationText.innerHTML = formatCodeInText(currentQuizQuestions[currentQuestionIndex].explanation);
        explanationArea.classList.remove('hidden');
        
        // Render l·∫°i c√°c c√¥ng th·ª©c to√°n h·ªçc v·ªõi MathJax
        if (window.MathJax) {
            MathJax.typesetPromise([explanationText]).catch(function (err) {
                console.log('MathJax error: ' + err.message);
            });
        }
        
        nextBtn.classList.remove('hidden');
    }

    // H√†m b·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
    function startTimer() {
        let timeLeft = QUIZ_DURATION;
        timerInterval = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `Th·ªùi gian: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                showResults();
            }
        }, 1000);
    }
    
    // H√†m hi·ªÉn th·ªã k·∫øt qu·∫£
    function showResults() {
        clearInterval(timerInterval);
        quizScreen.classList.add('hidden');
        resultScreen.classList.remove('hidden');

        const percentage = ((score / NUM_QUESTIONS) * 100).toFixed(2);
        scoreDisplay.textContent = score;
        percentageDisplay.textContent = percentage;

        // ƒê√°nh gi√° k·∫øt qu·∫£
        let message = '';
        if (percentage >= 80) {
            message = 'üéâ Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c IT007.';
        } else if (percentage >= 70) {
            message = 'üëç T·ªët! B·∫°n c√≥ hi·ªÉu bi·∫øt t·ªët v·ªÅ H·ªá ƒëi·ªÅu h√†nh.';
        } else if (percentage >= 50) {
            message = 'üìö Kh√°! H√£y √¥n t·∫≠p th√™m ƒë·ªÉ n√¢ng cao ki·∫øn th·ª©c.';
        } else {
            message = 'üí™ C·∫ßn c·ªë g·∫Øng h∆°n! H√£y h·ªçc k·ªπ l·∫°i c√°c kh√°i ni·ªám c∆° b·∫£n.';
        }
        resultMessage.textContent = message;

        // Hi·ªÉn th·ªã th·ªëng k√™ theo ch·ªß ƒë·ªÅ
        displayTopicBreakdown();
    }

    // H√†m hi·ªÉn th·ªã th·ªëng k√™ theo ch·ªß ƒë·ªÅ
    function displayTopicBreakdown() {
        let html = '<h3>üìä K·∫øt qu·∫£ theo ch·ªß ƒë·ªÅ:</h3>';
        html += '<div style="display: grid; gap: 10px;">';
        
        for (const [topic, stats] of Object.entries(topicStats)) {
            const topicPercentage = ((stats.correct / stats.total) * 100).toFixed(1);
            const color = topicPercentage >= 70 ? '#28a745' : topicPercentage >= 50 ? '#ffc107' : '#dc3545';
            
            html += `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: rgba(240, 147, 251, 0.1); border-radius: 5px;">
                    <span style="font-weight: 500;">${topic}</span>
                    <span style="color: ${color}; font-weight: bold;">${stats.correct}/${stats.total} (${topicPercentage}%)</span>
                </div>
            `;
        }
        
        html += '</div>';
        topicBreakdown.innerHTML = html;
    }

    // H√†m tho√°t quiz v√† quay v·ªÅ trang ch·ªß
    function exitQuiz() {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t? K·∫øt qu·∫£ s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.')) {
            clearInterval(timerInterval);
            window.location.href = 'index.html';
        }
    }

    // X·ª≠ l√Ω ph√≠m t·∫Øt (ESC ƒë·ªÉ tho√°t)
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && !quizScreen.classList.contains('hidden')) {
            exitQuiz();
        }
    });

    // G√°n s·ª± ki·ªán cho c√°c n√∫t
    startBtn.addEventListener('click', startQuiz);
    exitBtn.addEventListener('click', exitQuiz);
    
    nextBtn.addEventListener('click', () => {
        currentQuestionIndex++;
        if (currentQuestionIndex < NUM_QUESTIONS) {
            displayQuestion();
        } else {
            showResults();
        }
    });
    
    restartBtn.addEventListener('click', () => {
        startQuiz();
    });

    // T·∫£i c√¢u h·ªèi khi trang ƒë∆∞·ª£c load
    fetchQuestions();
});
