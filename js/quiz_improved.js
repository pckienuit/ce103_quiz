document.addEventListener('DOMContentLoaded', () => {
    // C√°c bi·∫øn tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ HTML
    const startScreen = document.getElementById('start-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const resultScreen = document.getElementById('result-screen');
    const startBtn = document.getElementById('start-quiz-btn');
    const nextBtn = document.getElementById('next-question-btn');
    const restartBtn = document.getElementById('restart-quiz-btn');
    const exitBtn = document.getElementById('exit-quiz-btn');
    
    const questionCounter = document.getElementById('question-counter');
    const timerDisplay = document.getElementById('timer');
    const questionText = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const explanationArea = document.getElementById('explanation-area');
    const explanationText = document.getElementById('explanation-text');

    const scoreDisplay = document.getElementById('score');
    const percentageDisplay = document.getElementById('percentage');
    const resultMessage = document.getElementById('result-message');

    let allQuestions = [];
    let currentQuizQuestions = [];
    let currentQuestionIndex = 0;
    let score = 0;
    let timerInterval;
    const QUIZ_DURATION = 70 * 60; // 70 ph√∫t t√≠nh b·∫±ng gi√¢y
    const NUM_QUESTIONS = 40;    // H√†m fetch c√¢u h·ªèi v·ªõi enhanced highlighting
    async function fetchQuestions() {
        try {
            updateAIStatus('üîÑ Loading enhanced data...', 'active');
            
            // Try to load enhanced data first
            if (window.enhancedHighlighter) {
                try {
                    await window.enhancedHighlighter.loadEnhancedData();
                    allQuestions = window.enhancedHighlighter.getAllEnhancedQuestions();
                    updateAIStatus('‚úÖ Enhanced AI data loaded', 'active');
                    console.log('‚úÖ Using enhanced AI-processed data');
                    return;
                } catch (enhancedError) {
                    console.warn('Enhanced data not available, falling back to original:', enhancedError);
                    updateAIStatus('‚ö†Ô∏è Enhanced data unavailable', 'fallback');
                }
            }

            // Fallback to original data with regex highlighting
            const response = await fetch('api/get_questions.php');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const originalQuestions = await response.json();
            
            // Apply fallback highlighting
            allQuestions = originalQuestions.map(question => ({
                ...question,
                question: window.enhancedHighlighter ? 
                    window.enhancedHighlighter.fallbackHighlight(question.question) : 
                    question.question,
                options: Object.fromEntries(
                    Object.entries(question.options).map(([key, value]) => [
                        key, 
                        window.enhancedHighlighter ? 
                            window.enhancedHighlighter.fallbackHighlight(value) : 
                            value
                    ])
                ),
                explanation: window.enhancedHighlighter ? 
                    window.enhancedHighlighter.fallbackHighlight(question.explanation) : 
                    question.explanation
            }));
            
            updateAIStatus('üìù Original data with basic highlighting', 'fallback');
            
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi:', error);
            updateAIStatus('‚ùå Loading failed', 'error');
            questionText.textContent = 'L·ªói t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    // H√†m x√°o tr·ªôn m·∫£ng (Fisher-Yates shuffle)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    // H√†m b·∫Øt ƒë·∫ßu quiz
    function startQuiz() {
        startScreen.classList.add('hidden');
        resultScreen.classList.add('hidden');
        quizScreen.classList.remove('hidden');

        currentQuestionIndex = 0;
        score = 0;
        shuffleArray(allQuestions);
        currentQuizQuestions = allQuestions.slice(0, NUM_QUESTIONS);

        displayQuestion();
        startTimer();
    }    // ...existing code...    // H√†m hi·ªÉn th·ªã c√¢u h·ªèi v·ªõi enhanced highlighting
    async function displayQuestion() {
        resetState();
        const question = currentQuizQuestions[currentQuestionIndex];
        questionCounter.textContent = `C√¢u ${currentQuestionIndex + 1} / ${NUM_QUESTIONS}`;
        
        // Display question directly (already processed)
        questionText.innerHTML = question.question;

        // Display options (already processed)
        for (const key in question.options) {
            const button = document.createElement('button');
            button.innerHTML = `<strong>${key}.</strong> ${question.options[key]}`;
            button.classList.add('option-btn');
            button.dataset.answer = key;
            button.addEventListener('click', selectAnswer);
            optionsContainer.appendChild(button);
        }

        // Update AI status if metadata available
        if (question.metadata && question.metadata.hasAI) {
            updateAIStatus('‚úÖ AI-enhanced content', 'active');
        }

        // Render code highlighting v·ªõi Prism.js
        if (window.Prism) {
            Prism.highlightAllUnder(questionText);
            Prism.highlightAllUnder(optionsContainer);
        }

        // Render l·∫°i c√°c c√¥ng th·ª©c to√°n h·ªçc v·ªõi MathJax
        if (window.MathJax) {
            MathJax.typesetPromise([questionText, optionsContainer]).catch(function (err) {
                console.log('MathJax error: ' + err.message);
            });
        }
    }

    // H√†m reset tr·∫°ng th√°i tr∆∞·ªõc khi hi·ªÉn th·ªã c√¢u h·ªèi m·ªõi
    function resetState() {
        optionsContainer.innerHTML = '';
        explanationArea.classList.add('hidden');
        nextBtn.classList.add('hidden');
    }    // H√†m x·ª≠ l√Ω khi ch·ªçn c√¢u tr·∫£ l·ªùi
    async function selectAnswer(e) {
        const selectedBtn = e.target.closest('.option-btn');
        if (!selectedBtn) return;

        const selectedAnswer = selectedBtn.dataset.answer;
        const correctAnswer = currentQuizQuestions[currentQuestionIndex].answer;

        if (selectedAnswer === correctAnswer) {
            score++;
            selectedBtn.classList.add('correct');
        } else {
            selectedBtn.classList.add('incorrect');
        }

        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch
        Array.from(optionsContainer.children).forEach(button => {
            if (button.dataset.answer === correctAnswer) {
                button.classList.add('correct');
            }
            button.disabled = true; // V√¥ hi·ªáu h√≥a c√°c l·ª±a ch·ªçn
        });        // Hi·ªÉn th·ªã explanation (already processed)
        explanationText.innerHTML = currentQuizQuestions[currentQuestionIndex].explanation;
        
        explanationArea.classList.remove('hidden');
        
        // Render code highlighting v·ªõi Prism.js cho explanation
        if (window.Prism) {
            Prism.highlightAllUnder(explanationText);
        }
        
        // Render l·∫°i c√°c c√¥ng th·ª©c to√°n h·ªçc v·ªõi MathJax
        if (window.MathJax) {
            MathJax.typesetPromise([explanationText]).catch(function (err) {
                console.log('MathJax error: ' + err.message);
            });
        }
        
        nextBtn.classList.remove('hidden');
    }

    // H√†m b·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
    function startTimer() {
        let timeLeft = QUIZ_DURATION;
        timerInterval = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `Th·ªùi gian: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                showResults();
            }
        }, 1000);
    }
    
    // H√†m hi·ªÉn th·ªã k·∫øt qu·∫£
    function showResults() {
        clearInterval(timerInterval);
        quizScreen.classList.add('hidden');
        resultScreen.classList.remove('hidden');

        const percentage = ((score / NUM_QUESTIONS) * 100).toFixed(2);
        scoreDisplay.textContent = score;
        percentageDisplay.textContent = percentage;

        if (percentage >= 50) {
            resultMessage.textContent = 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ qua m√¥n.';
            resultMessage.style.color = 'green';
        } else {
            resultMessage.textContent = 'R·∫•t ti·∫øc, b·∫°n c·∫ßn c·ªë g·∫Øng h∆°n.';
            resultMessage.style.color = 'red';
        }
    }

    // H√†m tho√°t quiz v√† quay v·ªÅ trang ch·ªß
    function exitQuiz() {
        const confirmExit = confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t? Ti·∫øn tr√¨nh l√†m b√†i s·∫Ω b·ªã m·∫•t.');
        if (confirmExit) {
            clearInterval(timerInterval);
            window.location.href = 'index.html';
        }
    }

    // X·ª≠ l√Ω ph√≠m t·∫Øt (ESC ƒë·ªÉ tho√°t)
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && !quizScreen.classList.contains('hidden')) {
            exitQuiz();
        }
    });

    // G√°n s·ª± ki·ªán cho c√°c n√∫t
    startBtn.addEventListener('click', startQuiz);
    exitBtn.addEventListener('click', exitQuiz);
    
    nextBtn.addEventListener('click', () => {
        currentQuestionIndex++;
        if (currentQuestionIndex < NUM_QUESTIONS) {
            displayQuestion();
        } else {
            showResults();
        }
    });

    restartBtn.addEventListener('click', startQuiz);

    // T·∫£i c√¢u h·ªèi ngay khi trang ƒë∆∞·ª£c m·ªü
    fetchQuestions();

    // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i Gemini AI
    function updateAIStatus(message, type = 'active') {
        const statusEl = document.getElementById('ai-status');
        if (statusEl) {
            statusEl.textContent = message;
            statusEl.className = `ai-status ${type}`;
        }
    }
});
