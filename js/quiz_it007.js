document.addEventListener('DOMContentLoaded', () => {
    // C√°c bi·∫øn tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ HTML
    const startScreen = document.getElementById('start-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const resultScreen = document.getElementById('result-screen');
    const startBtn = document.getElementById('start-quiz-btn');
    const nextBtn = document.getElementById('next-question-btn');
    const restartBtn = document.getElementById('restart-quiz-btn');
    const exitBtn = document.getElementById('exit-quiz-btn');
    
    const questionCounter = document.getElementById('question-counter');
    const timerDisplay = document.getElementById('timer');
    const questionText = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const explanationArea = document.getElementById('explanation-area');
    const explanationText = document.getElementById('explanation-text');
    const topicIndicator = document.getElementById('topic-indicator');

    const scoreDisplay = document.getElementById('score');
    const percentageDisplay = document.getElementById('percentage');
    const resultMessage = document.getElementById('result-message');
    const topicResults = document.getElementById('topic-results');

    let allQuestions = [];
    let currentQuizQuestions = [];
    let currentQuestionIndex = 0;
    let score = 0;
    let topicScores = {};
    let timerInterval;
    const QUIZ_DURATION = 40 * 60; // 40 ph√∫t t√≠nh b·∫±ng gi√¢y
    const NUM_QUESTIONS = 24;

    // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i AI
    function updateAIStatus(message, status = 'active') {
        const aiStatus = document.getElementById('ai-status');
        if (aiStatus) {
            aiStatus.textContent = message;
            aiStatus.className = `ai-status ${status}`;
        }
    }

    // H√†m fetch c√¢u h·ªèi IT007 v·ªõi enhanced highlighting
    async function fetchQuestions() {
        try {
            updateAIStatus('üîÑ Loading IT007 data...', 'active');
            
            // Try to load enhanced data first
            if (window.enhancedHighlighter) {
                try {
                    await window.enhancedHighlighter.loadEnhancedData('it007');
                    allQuestions = window.enhancedHighlighter.getAllEnhancedQuestions();
                    updateAIStatus('‚úÖ Enhanced AI data loaded', 'active');
                    console.log('‚úÖ Using enhanced AI-processed IT007 data');
                    updateTopicStats();
                    return;
                } catch (enhancedError) {
                    console.warn('Enhanced IT007 data not available, falling back to original:', enhancedError);
                    updateAIStatus('‚ö†Ô∏è Enhanced data unavailable', 'fallback');
                }
            }

            // Fallback to original data with regex highlighting
            const response = await fetch('api/get_it007_questions.php');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const originalQuestions = await response.json();
            
            // Apply fallback highlighting
            allQuestions = originalQuestions.map(question => ({
                ...question,
                question: window.enhancedHighlighter ? 
                    window.enhancedHighlighter.fallbackHighlight(question.question) : 
                    question.question,
                options: Object.fromEntries(
                    Object.entries(question.options).map(([key, value]) => [
                        key, 
                        window.enhancedHighlighter ? 
                            window.enhancedHighlighter.fallbackHighlight(value) : 
                            value
                    ])
                ),
                explanation: window.enhancedHighlighter ? 
                    window.enhancedHighlighter.fallbackHighlight(question.explanation) : 
                    question.explanation
            }));
            
            updateAIStatus('üìù Original IT007 data with basic highlighting', 'fallback');
            updateTopicStats();
            
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi IT007:', error);
            updateAIStatus('‚ùå Loading failed', 'error');
            questionText.textContent = 'L·ªói t·∫£i c√¢u h·ªèi IT007. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    // H√†m c·∫≠p nh·∫≠t th·ªëng k√™ ch·ªß ƒë·ªÅ
    function updateTopicStats() {
        const topicCounts = {};
        allQuestions.forEach(q => {
            topicCounts[q.topic] = (topicCounts[q.topic] || 0) + 1;
        });

        const chapter5Count = document.getElementById('chapter5-count');
        const chapter6Count = document.getElementById('chapter6-count');
        
        if (chapter5Count && chapter6Count) {
            chapter5Count.textContent = `${topicCounts['ƒê·ªìng b·ªô ho√° ti·∫øn tr√¨nh (Ch∆∞∆°ng 5)'] || 0} c√¢u`;
            chapter6Count.textContent = `${topicCounts['T·∫Øc ngh·∫Ωn (Deadlock) (Ch∆∞∆°ng 6)'] || 0} c√¢u`;
        }
    }

    // H√†m x√°o tr·ªôn m·∫£ng (Fisher-Yates shuffle)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    // H√†m ch·ªçn c√¢u h·ªèi c√¢n b·∫±ng theo ch·ªß ƒë·ªÅ
    function selectBalancedQuestions(questions, totalQuestions) {
        // Nh√≥m c√¢u h·ªèi theo ch·ªß ƒë·ªÅ
        const questionsByTopic = {};
        questions.forEach(question => {
            if (!questionsByTopic[question.topic]) {
                questionsByTopic[question.topic] = [];
            }
            questionsByTopic[question.topic].push(question);
        });

        const topics = Object.keys(questionsByTopic);
        const questionsPerTopic = Math.floor(totalQuestions / topics.length);
        const remainingQuestions = totalQuestions % topics.length;
        
        let selectedQuestions = [];
        
        // Ch·ªçn c√¢u h·ªèi c√¢n b·∫±ng t·ª´ m·ªói ch·ªß ƒë·ªÅ
        topics.forEach((topic, index) => {
            const topicQuestions = [...questionsByTopic[topic]];
            shuffleArray(topicQuestions);
            
            // S·ªë c√¢u h·ªèi cho ch·ªß ƒë·ªÅ n√†y
            let questionsToTake = questionsPerTopic;
            if (index < remainingQuestions) {
                questionsToTake++; // Ph√¢n ph·ªëi c√¢u h·ªèi d∆∞
            }
            
            // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë c√¢u h·ªèi c√≥ s·∫µn
            questionsToTake = Math.min(questionsToTake, topicQuestions.length);
            
            selectedQuestions.push(...topicQuestions.slice(0, questionsToTake));
        });

        // N·∫øu ch∆∞a ƒë·ªß c√¢u h·ªèi, b·ªï sung t·ª´ c√°c ch·ªß ƒë·ªÅ c√≥ nhi·ªÅu c√¢u h·ªèi
        while (selectedQuestions.length < totalQuestions) {
            const availableQuestions = questions.filter(q => 
                !selectedQuestions.some(sq => sq.id === q.id)
            );
            
            if (availableQuestions.length === 0) break;
            
            shuffleArray(availableQuestions);
            selectedQuestions.push(availableQuestions[0]);
        }

        // X√°o tr·ªôn th·ª© t·ª± c√¢u h·ªèi cu·ªëi c√πng
        shuffleArray(selectedQuestions);
        
        return selectedQuestions.slice(0, totalQuestions);
    }

    // H√†m b·∫Øt ƒë·∫ßu quiz
    function startQuiz() {
        startScreen.classList.add('hidden');
        resultScreen.classList.add('hidden');
        quizScreen.classList.remove('hidden');

        currentQuestionIndex = 0;
        score = 0;
        topicScores = {};
        
        // Ch·ªçn c√¢u h·ªèi c√¢n b·∫±ng theo ch·ªß ƒë·ªÅ
        currentQuizQuestions = selectBalancedQuestions(allQuestions, NUM_QUESTIONS);
        
        // Kh·ªüi t·∫°o ƒëi·ªÉm theo ch·ªß ƒë·ªÅ
        currentQuizQuestions.forEach(q => {
            if (!topicScores[q.topic]) {
                topicScores[q.topic] = { correct: 0, total: 0 };
            }
            topicScores[q.topic].total++;
        });

        displayQuestion();
        startTimer();
    }

    // H√†m hi·ªÉn th·ªã c√¢u h·ªèi
    function displayQuestion() {
        const question = currentQuizQuestions[currentQuestionIndex];
        
        questionCounter.textContent = `C√¢u ${currentQuestionIndex + 1} / ${NUM_QUESTIONS}`;
        questionText.innerHTML = question.question;
        topicIndicator.textContent = `üìö ${question.topic}`;
        
        optionsContainer.innerHTML = '';
        Object.entries(question.options).forEach(([key, value]) => {
            const optionDiv = document.createElement('div');
            optionDiv.className = 'option';
            optionDiv.innerHTML = `<strong>${key}:</strong> ${value}`;
            optionDiv.addEventListener('click', () => selectOption(optionDiv, key));
            optionsContainer.appendChild(optionDiv);
        });

        explanationArea.classList.add('hidden');
        nextBtn.classList.add('hidden');

        // Re-render MathJax if present
        if (window.MathJax) {
            MathJax.typesetPromise([questionText, optionsContainer]).catch(console.error);
        }

        // Re-highlight code if Prism is present
        if (window.Prism) {
            Prism.highlightAllUnder(questionText);
            Prism.highlightAllUnder(optionsContainer);
        }
    }

    // H√†m ch·ªçn ƒë√°p √°n
    function selectOption(selectedDiv, selectedAnswer) {
        const question = currentQuizQuestions[currentQuestionIndex];
        const correctAnswer = question.answer;
        
        // Lo·∫°i b·ªè selection c≈©
        document.querySelectorAll('.option').forEach(opt => {
            opt.classList.remove('selected');
        });
        
        selectedDiv.classList.add('selected');
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        setTimeout(() => {
            document.querySelectorAll('.option').forEach(opt => {
                const optionKey = opt.innerHTML.match(/<strong>([A-D]):<\/strong>/)[1];
                if (optionKey === correctAnswer) {
                    opt.classList.add('correct');
                } else if (optionKey === selectedAnswer && selectedAnswer !== correctAnswer) {
                    opt.classList.add('incorrect');
                }
                opt.style.pointerEvents = 'none';
            });

            // C·∫≠p nh·∫≠t ƒëi·ªÉm
            if (selectedAnswer === correctAnswer) {
                score++;
                topicScores[question.topic].correct++;
            }

            // Hi·ªÉn th·ªã gi·∫£i th√≠ch
            explanationText.innerHTML = question.explanation;
            explanationArea.classList.remove('hidden');
            
            // Re-render MathJax in explanation
            if (window.MathJax) {
                MathJax.typesetPromise([explanationText]).catch(console.error);
            }
            
            // Re-highlight code in explanation
            if (window.Prism) {
                Prism.highlightAllUnder(explanationText);
            }

            nextBtn.classList.remove('hidden');
        }, 500);
    }

    // H√†m c√¢u h·ªèi ti·∫øp theo
    function nextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < currentQuizQuestions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    }

    // H√†m hi·ªÉn th·ªã k·∫øt qu·∫£
    function showResults() {
        clearInterval(timerInterval);
        quizScreen.classList.add('hidden');
        resultScreen.classList.remove('hidden');

        const percentage = Math.round((score / NUM_QUESTIONS) * 100);
        
        scoreDisplay.textContent = score;
        percentageDisplay.textContent = percentage;
        
        // Th√¥ng ƒëi·ªáp k·∫øt qu·∫£
        let message = '';
        if (percentage >= 90) {
            message = 'üèÜ Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c H·ªá ƒêi·ªÅu H√†nh!';
        } else if (percentage >= 80) {
            message = 'üéâ R·∫•t t·ªët! Ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ OS r·∫•t v·ªØng v√†ng!';
        } else if (percentage >= 70) {
            message = 'üëç Kh√° t·ªët! H√£y √¥n t·∫≠p th√™m m·ªôt s·ªë ch·ªß ƒë·ªÅ.';
        } else if (percentage >= 60) {
            message = 'üìö C·∫ßn c·∫£i thi·ªán. H√£y t·∫≠p trung √¥n t·∫≠p th√™m.';
        } else {
            message = 'üí™ ƒê·ª´ng n·∫£n l√≤ng! H√£y √¥n t·∫≠p k·ªπ v√† th·ª≠ l·∫°i.';
        }
        resultMessage.textContent = message;

        // Hi·ªÉn th·ªã k·∫øt qu·∫£ theo ch·ªß ƒë·ªÅ
        displayTopicBreakdown();
    }

    // H√†m hi·ªÉn th·ªã k·∫øt qu·∫£ theo ch·ªß ƒë·ªÅ
    function displayTopicBreakdown() {
        topicResults.innerHTML = '';
        
        Object.entries(topicScores).forEach(([topic, scores]) => {
            const percentage = Math.round((scores.correct / scores.total) * 100);
            
            const topicDiv = document.createElement('div');
            topicDiv.className = 'topic-result';
            topicDiv.innerHTML = `
                <div class="topic-name">${topic}</div>
                <div class="topic-score">${scores.correct}/${scores.total} (${percentage}%)</div>
                <div class="topic-bar">
                    <div class="topic-progress" style="width: ${percentage}%"></div>
                </div>
            `;
            
            topicResults.appendChild(topicDiv);
        });
    }

    // H√†m timer
    function startTimer() {
        let timeLeft = QUIZ_DURATION;
        
        timerInterval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `Th·ªùi gian: ${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            if (timeLeft <= 0) {
                showResults();
                return;
            }
            
            timeLeft--;
        }, 1000);
    }

    // H√†m tho√°t quiz
    function exitQuiz() {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t? K·∫øt qu·∫£ s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.')) {
            clearInterval(timerInterval);
            window.location.href = 'index.html';
        }
    }

    // H√†m kh·ªüi t·∫°o l·∫°i quiz
    function restartQuiz() {
        clearInterval(timerInterval);
        startQuiz();
    }

    // Event listeners
    startBtn.addEventListener('click', startQuiz);
    nextBtn.addEventListener('click', nextQuestion);
    restartBtn.addEventListener('click', restartQuiz);
    exitBtn.addEventListener('click', exitQuiz);

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !quizScreen.classList.contains('hidden')) {
            exitQuiz();
        }
        if (e.key === 'Enter' && !nextBtn.classList.contains('hidden')) {
            nextQuestion();
        }
        if (e.key >= '1' && e.key <= '4' && !quizScreen.classList.contains('hidden')) {
            const options = document.querySelectorAll('.option');
            const optionIndex = parseInt(e.key) - 1;
            if (options[optionIndex] && options[optionIndex].style.pointerEvents !== 'none') {
                const optionKey = String.fromCharCode(65 + optionIndex); // A, B, C, D
                selectOption(options[optionIndex], optionKey);
            }
        }
    });

    // T·∫£i c√¢u h·ªèi khi trang ƒë∆∞·ª£c load
    fetchQuestions();
});
